stages:
  - backenddevelopment
  - development
  - production

backenddevelopment:
  image: prabhatiitbhu/gitlabdockernodejs10python3:latest
  stage: backenddevelopment

  script:
   - bash ./bin/erdr_dev.sh
  only:
   - master

development:
  stage: development
  image: docker:19.03.13
  services:
    - docker:19.03.13-dind
  variables:
    repo_name: mmpbackend
  before_script:
    - apk add --no-cache bash curl jq python3 py3-pip git
    - pip install --upgrade pip
    - pip install awscli==1.18.0
    - aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${MMPECR}
  script:
    - IMAGE_REPO=$(aws ecr describe-repositories --repository-names ${repo_name} --region ${AWS_DEFAULT_REGION} --query 'repositories[0].repositoryUri' --output text)
    - docker build -f Dockerfile -t ${IMAGE_REPO}:latest .
    - docker tag $IMAGE_REPO:latest $IMAGE_REPO:$(git rev-parse --short HEAD)
    - docker push $IMAGE_REPO:$(git rev-parse --short HEAD)
    - IMAGE_REPO_TAG=$IMAGE_REPO:$(git rev-parse --short HEAD)
    - sh deploy_app_development.sh mmpcluster mmp-backend-service mmp-backend mmpbackend
  only:
    - development

production:
  stage: production
  image: docker:19.03.13
  services:
    - docker:19.03.13-dind
  variables:
    repo_name: mmpprodbackend
  before_script:
    - sed -i -e "s/deverdr/proderdr/g" authkey.py
    - sed -i -e "s/erdradmin/mmpadmin/g" authkey.py
    - sed -i -e "s/01pass1234!/erdrbackend1!/g" authkey.py
    - sed -i -e "s/futurebyte.mysql.database.azure.com/futurebyte.mysql.database.azure.com/g" authkey.py
    - apk add --no-cache bash curl jq python3 py3-pip git
    - pip install --upgrade pip
    - pip install awscli==1.18.0
    - aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${MMPECR}
  script:
    - IMAGE_REPO=$(aws ecr describe-repositories --repository-names ${repo_name} --region ${AWS_DEFAULT_REGION} --query 'repositories[0].repositoryUri' --output text)
    - docker build -f Dockerfile -t ${IMAGE_REPO}:latest .
    - docker tag $IMAGE_REPO:latest $IMAGE_REPO:$(git rev-parse --short HEAD)
    - docker push $IMAGE_REPO:$(git rev-parse --short HEAD)
    - IMAGE_REPO_TAG=$IMAGE_REPO:$(git rev-parse --short HEAD)
    - sh deploy_app_development.sh mmpprodcluster mmpprod-backend-service mmpprod-backend mmpprodbackend
  only:
    - production